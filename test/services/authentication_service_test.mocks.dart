// Mocks generated by Mockito 5.4.6 from annotations
// in item_manager/test/services/authentication_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:item_manager/services/auth_api_service.dart' as _i4;
import 'package:item_manager/services/biometric_auth_service.dart' as _i2;
import 'package:item_manager/services/pin_auth_service.dart' as _i3;
import 'package:item_manager/services/secure_storage_service.dart' as _i5;
import 'package:local_auth/local_auth.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeBiometricAuthResult_0 extends _i1.SmartFake
    implements _i2.BiometricAuthResult {
  _FakeBiometricAuthResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePinAuthResult_1 extends _i1.SmartFake implements _i3.PinAuthResult {
  _FakePinAuthResult_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeApiResult_2<T> extends _i1.SmartFake implements _i4.ApiResult<T> {
  _FakeApiResult_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SecureStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageService extends _i1.Mock
    implements _i5.SecureStorageService {
  MockSecureStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> storeTokens({
    required String? accessToken,
    required String? refreshToken,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#storeTokens, [], {
              #accessToken: accessToken,
              #refreshToken: refreshToken,
              #userId: userId,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<String?> getAccessToken() =>
      (super.noSuchMethod(
            Invocation.method(#getAccessToken, []),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<String?> getRefreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#getRefreshToken, []),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<String?> getUserId() =>
      (super.noSuchMethod(
            Invocation.method(#getUserId, []),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<String?> getDeviceId() =>
      (super.noSuchMethod(
            Invocation.method(#getDeviceId, []),
            returnValue: _i6.Future<String?>.value(),
          )
          as _i6.Future<String?>);

  @override
  _i6.Future<bool> isBiometricEnrolled() =>
      (super.noSuchMethod(
            Invocation.method(#isBiometricEnrolled, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> setBiometricEnrolled(bool? enrolled) =>
      (super.noSuchMethod(
            Invocation.method(#setBiometricEnrolled, [enrolled]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> isPinSet() =>
      (super.noSuchMethod(
            Invocation.method(#isPinSet, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> setPinSet(bool? set) =>
      (super.noSuchMethod(
            Invocation.method(#setPinSet, [set]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> storePinHash(String? pinHash) =>
      (super.noSuchMethod(
            Invocation.method(#storePinHash, [pinHash]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> verifyPin(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPin, [pin]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<bool> isLockedOut() =>
      (super.noSuchMethod(
            Invocation.method(#isLockedOut, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<int> getRemainingLockoutTime() =>
      (super.noSuchMethod(
            Invocation.method(#getRemainingLockoutTime, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<void> recordFailedAttempt() =>
      (super.noSuchMethod(
            Invocation.method(#recordFailedAttempt, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<int> getFailedAttempts() =>
      (super.noSuchMethod(
            Invocation.method(#getFailedAttempts, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<void> clearAllData() =>
      (super.noSuchMethod(
            Invocation.method(#clearAllData, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<bool> isAuthenticated() =>
      (super.noSuchMethod(
            Invocation.method(#isAuthenticated, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);
}

/// A class which mocks [BiometricAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiometricAuthService extends _i1.Mock
    implements _i2.BiometricAuthService {
  MockBiometricAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<bool> isBiometricAvailable() =>
      (super.noSuchMethod(
            Invocation.method(#isBiometricAvailable, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<List<_i7.BiometricType>> getAvailableBiometricTypes() =>
      (super.noSuchMethod(
            Invocation.method(#getAvailableBiometricTypes, []),
            returnValue: _i6.Future<List<_i7.BiometricType>>.value(
              <_i7.BiometricType>[],
            ),
          )
          as _i6.Future<List<_i7.BiometricType>>);

  @override
  _i6.Future<bool> isDeviceSupported() =>
      (super.noSuchMethod(
            Invocation.method(#isDeviceSupported, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i2.BiometricAuthResult> authenticateWithBiometrics({
    String? reason = 'Authenticate to access your account',
    bool? stickyAuth = false,
    bool? sensitiveTransaction = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#authenticateWithBiometrics, [], {
              #reason: reason,
              #stickyAuth: stickyAuth,
              #sensitiveTransaction: sensitiveTransaction,
            }),
            returnValue: _i6.Future<_i2.BiometricAuthResult>.value(
              _FakeBiometricAuthResult_0(
                this,
                Invocation.method(#authenticateWithBiometrics, [], {
                  #reason: reason,
                  #stickyAuth: stickyAuth,
                  #sensitiveTransaction: sensitiveTransaction,
                }),
              ),
            ),
          )
          as _i6.Future<_i2.BiometricAuthResult>);

  @override
  _i6.Future<_i2.BiometricAuthResult> enrollBiometric({
    required String? userId,
    required String? deviceId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#enrollBiometric, [], {
              #userId: userId,
              #deviceId: deviceId,
            }),
            returnValue: _i6.Future<_i2.BiometricAuthResult>.value(
              _FakeBiometricAuthResult_0(
                this,
                Invocation.method(#enrollBiometric, [], {
                  #userId: userId,
                  #deviceId: deviceId,
                }),
              ),
            ),
          )
          as _i6.Future<_i2.BiometricAuthResult>);

  @override
  _i6.Future<bool> isBiometricEnrolled() =>
      (super.noSuchMethod(
            Invocation.method(#isBiometricEnrolled, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  String getBiometricTypeName(_i7.BiometricType? type) =>
      (super.noSuchMethod(
            Invocation.method(#getBiometricTypeName, [type]),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getBiometricTypeName, [type]),
            ),
          )
          as String);

  @override
  String getErrorMessage(_i2.BiometricAuthError? error) =>
      (super.noSuchMethod(
            Invocation.method(#getErrorMessage, [error]),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getErrorMessage, [error]),
            ),
          )
          as String);
}

/// A class which mocks [PinAuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPinAuthService extends _i1.Mock implements _i3.PinAuthService {
  MockPinAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i3.PinAuthResult> verifyPin(String? pin) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPin, [pin]),
            returnValue: _i6.Future<_i3.PinAuthResult>.value(
              _FakePinAuthResult_1(this, Invocation.method(#verifyPin, [pin])),
            ),
          )
          as _i6.Future<_i3.PinAuthResult>);

  @override
  _i6.Future<_i3.PinAuthResult> changePin(String? currentPin, String? newPin) =>
      (super.noSuchMethod(
            Invocation.method(#changePin, [currentPin, newPin]),
            returnValue: _i6.Future<_i3.PinAuthResult>.value(
              _FakePinAuthResult_1(
                this,
                Invocation.method(#changePin, [currentPin, newPin]),
              ),
            ),
          )
          as _i6.Future<_i3.PinAuthResult>);

  @override
  _i6.Future<bool> isPinSet() =>
      (super.noSuchMethod(
            Invocation.method(#isPinSet, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<int> getFailedAttempts() =>
      (super.noSuchMethod(
            Invocation.method(#getFailedAttempts, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  _i6.Future<bool> isLockedOut() =>
      (super.noSuchMethod(
            Invocation.method(#isLockedOut, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<int> getRemainingLockoutTime() =>
      (super.noSuchMethod(
            Invocation.method(#getRemainingLockoutTime, []),
            returnValue: _i6.Future<int>.value(0),
          )
          as _i6.Future<int>);

  @override
  String getErrorMessage(_i3.PinAuthError? error) =>
      (super.noSuchMethod(
            Invocation.method(#getErrorMessage, [error]),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.method(#getErrorMessage, [error]),
            ),
          )
          as String);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AuthApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthApiService extends _i1.Mock implements _i4.AuthApiService {
  MockAuthApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.ApiResult<_i4.AuthTokens>> enrollBiometric({
    required String? userId,
    required String? deviceId,
    required String? biometricSignature,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#enrollBiometric, [], {
              #userId: userId,
              #deviceId: deviceId,
              #biometricSignature: biometricSignature,
            }),
            returnValue: _i6.Future<_i4.ApiResult<_i4.AuthTokens>>.value(
              _FakeApiResult_2<_i4.AuthTokens>(
                this,
                Invocation.method(#enrollBiometric, [], {
                  #userId: userId,
                  #deviceId: deviceId,
                  #biometricSignature: biometricSignature,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.ApiResult<_i4.AuthTokens>>);

  @override
  _i6.Future<_i4.ApiResult<_i4.AuthTokens>> loginWithBiometric({
    required String? userId,
    required String? deviceId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loginWithBiometric, [], {
              #userId: userId,
              #deviceId: deviceId,
            }),
            returnValue: _i6.Future<_i4.ApiResult<_i4.AuthTokens>>.value(
              _FakeApiResult_2<_i4.AuthTokens>(
                this,
                Invocation.method(#loginWithBiometric, [], {
                  #userId: userId,
                  #deviceId: deviceId,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.ApiResult<_i4.AuthTokens>>);

  @override
  _i6.Future<_i4.ApiResult<_i4.AuthTokens>> loginWithPin({
    required String? userId,
    required String? pin,
    required String? deviceId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#loginWithPin, [], {
              #userId: userId,
              #pin: pin,
              #deviceId: deviceId,
            }),
            returnValue: _i6.Future<_i4.ApiResult<_i4.AuthTokens>>.value(
              _FakeApiResult_2<_i4.AuthTokens>(
                this,
                Invocation.method(#loginWithPin, [], {
                  #userId: userId,
                  #pin: pin,
                  #deviceId: deviceId,
                }),
              ),
            ),
          )
          as _i6.Future<_i4.ApiResult<_i4.AuthTokens>>);

  @override
  _i6.Future<_i4.ApiResult<_i4.AuthTokens>> refreshToken() =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, []),
            returnValue: _i6.Future<_i4.ApiResult<_i4.AuthTokens>>.value(
              _FakeApiResult_2<_i4.AuthTokens>(
                this,
                Invocation.method(#refreshToken, []),
              ),
            ),
          )
          as _i6.Future<_i4.ApiResult<_i4.AuthTokens>>);

  @override
  _i6.Future<bool> isTokenExpired() =>
      (super.noSuchMethod(
            Invocation.method(#isTokenExpired, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<Map<String, dynamic>?> getUserFromToken() =>
      (super.noSuchMethod(
            Invocation.method(#getUserFromToken, []),
            returnValue: _i6.Future<Map<String, dynamic>?>.value(),
          )
          as _i6.Future<Map<String, dynamic>?>);

  @override
  _i6.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
